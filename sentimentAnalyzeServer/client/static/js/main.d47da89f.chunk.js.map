{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","className","Object","entries","this","props","emotions","map","emotionEntry","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","value","setState","renderTextBox","getSentimentLabel","Sentiment","sendForSentimentAnalysis","url","fetch","then","response","text","data","output","style","color","fontSize","sendForEmotionAnalysis","json","title","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d47da89f.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n    render() {\n      return (  \n        <div>\n          <table className=\"table table-bordered\">\n            <tbody>\n            {\n                //Write code to use the .map method that you worked on in the Hands-on React lab to extract the emotions\n                Object.entries(this.props.emotions).map(function(emotionEntry){\n                    return(\n                        <tr>\n                        <td>{emotionEntry[0]}</td>\n                        <td>{emotionEntry[1]}</td>\n                        </tr>\n                )\n                })\n            }\n            </tbody>\n          </table>\n          </div>\n          );\n        }\n    \n}\nexport default EmotionTable;","import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\n\nclass App extends React.Component {\n  state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n            mode: \"text\",\n          sentimentOutput:[],\n          sentiment:true\n        }\n  \n  renderTextArea = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"url\") {\n      this.setState({innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"text\",\n      sentimentOutput:[],\n      sentiment:true\n    })\n    } \n  }\n\n  renderTextBox = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"text\") {\n      this.setState({innercomp:<textarea rows=\"1\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"url\",\n      sentimentOutput:[],\n      sentiment:true\n    })\n    }\n  }\n\n  getSentimentLabel = (Sentiment) => {\n\n  }\n  sendForSentimentAnalysis = () => {\n    this.setState({sentiment:true});\n    let url = \".\";\n\n    if(this.state.mode === \"url\") {\n      url = url+\"/url/sentiment?url=\"+document.getElementById(\"textinput\").value;\n    } else {\n      url = url+\"/text/sentiment?text=\"+document.getElementById(\"textinput\").value;\n    }\n    fetch(url).then((response)=>{\n        response.text().then((data)=>{\n        this.setState({sentimentOutput:data});\n        let output = data;\n        if(data === \"positive\") {\n          output = <div style={{color:\"green\",fontSize:20}}>{data}</div>\n        } else if (data === \"negative\"){\n          output = <div style={{color:\"red\",fontSize:20}}>{data}</div>\n        } else {\n          output = <div style={{color:\"orange\",fontSize:20}}>{data}</div>\n        }\n        this.setState({sentimentOutput:output});\n      })});\n  }\n\n  sendForEmotionAnalysis = () => {\n\n    this.setState({sentiment:false});\n    let url = \".\";\n    if(this.state.mode === \"url\") {\n      url = url+\"/url/emotion?url=\"+document.getElementById(\"textinput\").value;\n    } else {\n      url = url+\"/text/emotion/?text=\"+document.getElementById(\"textinput\").value;\n    }\n    fetch(url).then((response)=>{\n      response.json().then((data)=>{\n      this.setState({sentimentOutput:<EmotionTable emotions={data}/>});\n  })})  ;\n  }\n  \n\n  render() {\n      document.title = \"Sentiment Analyzer\";\n    return (  \n      <div className=\"App\">\n      <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\n        <button className=\"btn btn-dark\"  onClick={this.renderTextBox}>URL</button>\n        <br/><br/>\n        {this.state.innercomp}\n        <br/>\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n        <br/>\n            {this.state.sentimentOutput}\n      </div>\n    );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}